// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/redis (interfaces: LikeDislikeCacheInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLikeDislikeCacheInterface is a mock of LikeDislikeCacheInterface interface.
type MockLikeDislikeCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLikeDislikeCacheInterfaceMockRecorder
}

// MockLikeDislikeCacheInterfaceMockRecorder is the mock recorder for MockLikeDislikeCacheInterface.
type MockLikeDislikeCacheInterfaceMockRecorder struct {
	mock *MockLikeDislikeCacheInterface
}

// NewMockLikeDislikeCacheInterface creates a new mock instance.
func NewMockLikeDislikeCacheInterface(ctrl *gomock.Controller) *MockLikeDislikeCacheInterface {
	mock := &MockLikeDislikeCacheInterface{ctrl: ctrl}
	mock.recorder = &MockLikeDislikeCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeDislikeCacheInterface) EXPECT() *MockLikeDislikeCacheInterfaceMockRecorder {
	return m.recorder
}

// AddToUserMatchList mocks base method.
func (m *MockLikeDislikeCacheInterface) AddToUserMatchList(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToUserMatchList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToUserMatchList indicates an expected call of AddToUserMatchList.
func (mr *MockLikeDislikeCacheInterfaceMockRecorder) AddToUserMatchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToUserMatchList", reflect.TypeOf((*MockLikeDislikeCacheInterface)(nil).AddToUserMatchList), arg0, arg1)
}

// GetLikeDislike mocks base method.
func (m *MockLikeDislikeCacheInterface) GetLikeDislike(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeDislike", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeDislike indicates an expected call of GetLikeDislike.
func (mr *MockLikeDislikeCacheInterfaceMockRecorder) GetLikeDislike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeDislike", reflect.TypeOf((*MockLikeDislikeCacheInterface)(nil).GetLikeDislike), arg0)
}

// GetMatchList mocks base method.
func (m *MockLikeDislikeCacheInterface) GetMatchList(arg0 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchList", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchList indicates an expected call of GetMatchList.
func (mr *MockLikeDislikeCacheInterfaceMockRecorder) GetMatchList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchList", reflect.TypeOf((*MockLikeDislikeCacheInterface)(nil).GetMatchList), arg0)
}

// PutLikeDislike mocks base method.
func (m *MockLikeDislikeCacheInterface) PutLikeDislike(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLikeDislike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLikeDislike indicates an expected call of PutLikeDislike.
func (mr *MockLikeDislikeCacheInterfaceMockRecorder) PutLikeDislike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLikeDislike", reflect.TypeOf((*MockLikeDislikeCacheInterface)(nil).PutLikeDislike), arg0, arg1)
}

// RemoveFromUserMatchList mocks base method.
func (m *MockLikeDislikeCacheInterface) RemoveFromUserMatchList(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUserMatchList", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUserMatchList indicates an expected call of RemoveFromUserMatchList.
func (mr *MockLikeDislikeCacheInterfaceMockRecorder) RemoveFromUserMatchList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUserMatchList", reflect.TypeOf((*MockLikeDislikeCacheInterface)(nil).RemoveFromUserMatchList), arg0)
}
