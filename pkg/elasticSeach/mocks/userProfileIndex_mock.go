// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/elasticSeach (interfaces: ElasticSearchIndexer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	elasticsearchPkg "github.com/SuperMatch/model/elasticSearch"
	gomock "github.com/golang/mock/gomock"
)

// MockElasticSearchIndexer is a mock of ElasticSearchIndexer interface.
type MockElasticSearchIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchIndexerMockRecorder
}

// MockElasticSearchIndexerMockRecorder is the mock recorder for MockElasticSearchIndexer.
type MockElasticSearchIndexerMockRecorder struct {
	mock *MockElasticSearchIndexer
}

// NewMockElasticSearchIndexer creates a new mock instance.
func NewMockElasticSearchIndexer(ctrl *gomock.Controller) *MockElasticSearchIndexer {
	mock := &MockElasticSearchIndexer{ctrl: ctrl}
	mock.recorder = &MockElasticSearchIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticSearchIndexer) EXPECT() *MockElasticSearchIndexerMockRecorder {
	return m.recorder
}

// GetUserProfile mocks base method.
func (m *MockElasticSearchIndexer) GetUserProfile(arg0 int) (elasticsearchPkg.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0)
	ret0, _ := ret[0].(elasticsearchPkg.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockElasticSearchIndexerMockRecorder) GetUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockElasticSearchIndexer)(nil).GetUserProfile), arg0)
}

// IndexUserProfile mocks base method.
func (m *MockElasticSearchIndexer) IndexUserProfile(arg0 elasticsearchPkg.UserProfile, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexUserProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexUserProfile indicates an expected call of IndexUserProfile.
func (mr *MockElasticSearchIndexerMockRecorder) IndexUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexUserProfile", reflect.TypeOf((*MockElasticSearchIndexer)(nil).IndexUserProfile), arg0, arg1)
}

// SearchProfile mocks base method.
func (m *MockElasticSearchIndexer) SearchProfile(arg0 map[string]interface{}) ([]elasticsearchPkg.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProfile", arg0)
	ret0, _ := ret[0].([]elasticsearchPkg.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile.
func (mr *MockElasticSearchIndexerMockRecorder) SearchProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockElasticSearchIndexer)(nil).SearchProfile), arg0)
}

// UpdateSearchProfile mocks base method.
func (m *MockElasticSearchIndexer) UpdateSearchProfile(arg0 elasticsearchPkg.UserProfile, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSearchProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSearchProfile indicates an expected call of UpdateSearchProfile.
func (mr *MockElasticSearchIndexerMockRecorder) UpdateSearchProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSearchProfile", reflect.TypeOf((*MockElasticSearchIndexer)(nil).UpdateSearchProfile), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockElasticSearchIndexer) UpdateUserProfile(arg0 elasticsearchPkg.UserProfile, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockElasticSearchIndexerMockRecorder) UpdateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockElasticSearchIndexer)(nil).UpdateUserProfile), arg0, arg1)
}
