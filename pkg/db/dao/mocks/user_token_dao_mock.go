// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/db/dao (interfaces: UserTokenRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SuperMatch/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserTokenRepository is a mock of UserTokenRepository interface.
type MockUserTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserTokenRepositoryMockRecorder
}

// MockUserTokenRepositoryMockRecorder is the mock recorder for MockUserTokenRepository.
type MockUserTokenRepositoryMockRecorder struct {
	mock *MockUserTokenRepository
}

// NewMockUserTokenRepository creates a new mock instance.
func NewMockUserTokenRepository(ctrl *gomock.Controller) *MockUserTokenRepository {
	mock := &MockUserTokenRepository{ctrl: ctrl}
	mock.recorder = &MockUserTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTokenRepository) EXPECT() *MockUserTokenRepositoryMockRecorder {
	return m.recorder
}

// FindByToken mocks base method.
func (m *MockUserTokenRepository) FindByToken(arg0 context.Context, arg1 string) (model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", arg0, arg1)
	ret0, _ := ret[0].(model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockUserTokenRepositoryMockRecorder) FindByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockUserTokenRepository)(nil).FindByToken), arg0, arg1)
}

// FindByTokenAndUserId mocks base method.
func (m *MockUserTokenRepository) FindByTokenAndUserId(arg0 context.Context, arg1 string, arg2 int) (model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTokenAndUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTokenAndUserId indicates an expected call of FindByTokenAndUserId.
func (mr *MockUserTokenRepositoryMockRecorder) FindByTokenAndUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTokenAndUserId", reflect.TypeOf((*MockUserTokenRepository)(nil).FindByTokenAndUserId), arg0, arg1, arg2)
}

// FindByUserId mocks base method.
func (m *MockUserTokenRepository) FindByUserId(arg0 context.Context, arg1 int64) (model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].(model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserTokenRepositoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserTokenRepository)(nil).FindByUserId), arg0, arg1)
}

// Insert mocks base method.
func (m *MockUserTokenRepository) Insert(arg0 context.Context, arg1 model.UserToken) (model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserTokenRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserTokenRepository)(nil).Insert), arg0, arg1)
}

// RemoveSession mocks base method.
func (m *MockUserTokenRepository) RemoveSession(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockUserTokenRepositoryMockRecorder) RemoveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockUserTokenRepository)(nil).RemoveSession), arg0, arg1)
}
