// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/db/dao (interfaces: UserProfileRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SuperMatch/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserProfileRepository is a mock of UserProfileRepository interface.
type MockUserProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileRepositoryMockRecorder
}

// MockUserProfileRepositoryMockRecorder is the mock recorder for MockUserProfileRepository.
type MockUserProfileRepositoryMockRecorder struct {
	mock *MockUserProfileRepository
}

// NewMockUserProfileRepository creates a new mock instance.
func NewMockUserProfileRepository(ctrl *gomock.Controller) *MockUserProfileRepository {
	mock := &MockUserProfileRepository{ctrl: ctrl}
	mock.recorder = &MockUserProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileRepository) EXPECT() *MockUserProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateUserProfile mocks base method.
func (m *MockUserProfileRepository) CreateUserProfile(arg0 context.Context, arg1 model.UserProfile) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfile indicates an expected call of CreateUserProfile.
func (mr *MockUserProfileRepositoryMockRecorder) CreateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfile", reflect.TypeOf((*MockUserProfileRepository)(nil).CreateUserProfile), arg0, arg1)
}

// FindById mocks base method.
func (m *MockUserProfileRepository) FindById(arg0 context.Context, arg1 int) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserProfileRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserProfileRepository)(nil).FindById), arg0, arg1)
}

// FindByUserId mocks base method.
func (m *MockUserProfileRepository) FindByUserId(arg0 context.Context, arg1 int) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserProfileRepositoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserProfileRepository)(nil).FindByUserId), arg0, arg1)
}

// UpdateProfileByMap mocks base method.
func (m *MockUserProfileRepository) UpdateProfileByMap(arg0 context.Context, arg1 map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileByMap", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileByMap indicates an expected call of UpdateProfileByMap.
func (mr *MockUserProfileRepositoryMockRecorder) UpdateProfileByMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileByMap", reflect.TypeOf((*MockUserProfileRepository)(nil).UpdateProfileByMap), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockUserProfileRepository) UpdateUserProfile(arg0 context.Context, arg1 model.UserProfile) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserProfileRepositoryMockRecorder) UpdateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserProfileRepository)(nil).UpdateUserProfile), arg0, arg1)
}
