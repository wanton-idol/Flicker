// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/service (interfaces: LoginInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"
	time "time"

	model "github.com/SuperMatch/model"
	dto "github.com/SuperMatch/model/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginInterface is a mock of LoginInterface interface.
type MockLoginInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoginInterfaceMockRecorder
}

// MockLoginInterfaceMockRecorder is the mock recorder for MockLoginInterface.
type MockLoginInterfaceMockRecorder struct {
	mock *MockLoginInterface
}

// NewMockLoginInterface creates a new mock instance.
func NewMockLoginInterface(ctrl *gomock.Controller) *MockLoginInterface {
	mock := &MockLoginInterface{ctrl: ctrl}
	mock.recorder = &MockLoginInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginInterface) EXPECT() *MockLoginInterfaceMockRecorder {
	return m.recorder
}

// CheckUserExistOrNot mocks base method.
func (m *MockLoginInterface) CheckUserExistOrNot(arg0 string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistOrNot", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckUserExistOrNot indicates an expected call of CheckUserExistOrNot.
func (mr *MockLoginInterfaceMockRecorder) CheckUserExistOrNot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistOrNot", reflect.TypeOf((*MockLoginInterface)(nil).CheckUserExistOrNot), arg0)
}

// GenerateAndSaveToken mocks base method.
func (m *MockLoginInterface) GenerateAndSaveToken(arg0 model.User) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndSaveToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateAndSaveToken indicates an expected call of GenerateAndSaveToken.
func (mr *MockLoginInterfaceMockRecorder) GenerateAndSaveToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndSaveToken", reflect.TypeOf((*MockLoginInterface)(nil).GenerateAndSaveToken), arg0)
}

// GetUserDetailsFromGoogle mocks base method.
func (m *MockLoginInterface) GetUserDetailsFromGoogle(arg0 dto.GoogleLoginResponse) model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsFromGoogle", arg0)
	ret0, _ := ret[0].(model.User)
	return ret0
}

// GetUserDetailsFromGoogle indicates an expected call of GetUserDetailsFromGoogle.
func (mr *MockLoginInterfaceMockRecorder) GetUserDetailsFromGoogle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsFromGoogle", reflect.TypeOf((*MockLoginInterface)(nil).GetUserDetailsFromGoogle), arg0)
}

// GoogleCallback mocks base method.
func (m *MockLoginInterface) GoogleCallback(arg0, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleLogin", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoogleCallback indicates an expected call of GoogleCallback.
func (mr *MockLoginInterfaceMockRecorder) GoogleCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleLogin", reflect.TypeOf((*MockLoginInterface)(nil).GoogleCallback), arg0, arg1)
}

// GoogleLogin mocks base method.
func (m *MockLoginInterface) GoogleLogin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleLogin")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoogleLogin indicates an expected call of GoogleLogin.
func (mr *MockLoginInterfaceMockRecorder) GoogleLogin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleLogin", reflect.TypeOf((*MockLoginInterface)(nil).GoogleLogin))
}

// SendOTPService mocks base method.
func (m *MockLoginInterface) SendOTPService(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTPService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTPService indicates an expected call of SendOTPService.
func (mr *MockLoginInterfaceMockRecorder) SendOTPService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTPService", reflect.TypeOf((*MockLoginInterface)(nil).SendOTPService), arg0)
}

// UserSignIN mocks base method.
func (m *MockLoginInterface) UserSignIN(arg0 model.User) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignIN", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserSignIN indicates an expected call of UserSignIN.
func (mr *MockLoginInterfaceMockRecorder) UserSignIN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignIN", reflect.TypeOf((*MockLoginInterface)(nil).UserSignIN), arg0)
}

// UserSignUP mocks base method.
func (m *MockLoginInterface) UserSignUP(arg0 model.User) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserSignUP indicates an expected call of UserSignUP.
func (mr *MockLoginInterfaceMockRecorder) UserSignUP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUP", reflect.TypeOf((*MockLoginInterface)(nil).UserSignUP), arg0)
}

// VerifyOTPService mocks base method.
func (m *MockLoginInterface) VerifyOTPService(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTPService", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPService indicates an expected call of VerifyOTPService.
func (mr *MockLoginInterfaceMockRecorder) VerifyOTPService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPService", reflect.TypeOf((*MockLoginInterface)(nil).VerifyOTPService), arg0, arg1)
}
