// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/db/dao (interfaces: UserSearchProfileRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SuperMatch/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserSearchProfileRepository is a mock of UserSearchProfileRepository interface.
type MockUserSearchProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSearchProfileRepositoryMockRecorder
}

// MockUserSearchProfileRepositoryMockRecorder is the mock recorder for MockUserSearchProfileRepository.
type MockUserSearchProfileRepositoryMockRecorder struct {
	mock *MockUserSearchProfileRepository
}

// NewMockUserSearchProfileRepository creates a new mock instance.
func NewMockUserSearchProfileRepository(ctrl *gomock.Controller) *MockUserSearchProfileRepository {
	mock := &MockUserSearchProfileRepository{ctrl: ctrl}
	mock.recorder = &MockUserSearchProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSearchProfileRepository) EXPECT() *MockUserSearchProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateUserSearchProfile mocks base method.
func (m *MockUserSearchProfileRepository) CreateUserSearchProfile(arg0 context.Context, arg1 map[string]interface{}) (model.UserSearchProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSearchProfile", arg0, arg1)
	ret0, _ := ret[0].(model.UserSearchProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSearchProfile indicates an expected call of CreateUserSearchProfile.
func (mr *MockUserSearchProfileRepositoryMockRecorder) CreateUserSearchProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSearchProfile", reflect.TypeOf((*MockUserSearchProfileRepository)(nil).CreateUserSearchProfile), arg0, arg1)
}

// FindByProfileId mocks base method.
func (m *MockUserSearchProfileRepository) FindByProfileId(arg0 context.Context, arg1 int) (model.UserSearchProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProfileId", arg0, arg1)
	ret0, _ := ret[0].(model.UserSearchProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProfileId indicates an expected call of FindByProfileId.
func (mr *MockUserSearchProfileRepositoryMockRecorder) FindByProfileId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProfileId", reflect.TypeOf((*MockUserSearchProfileRepository)(nil).FindByProfileId), arg0, arg1)
}

// FindByUserId mocks base method.
func (m *MockUserSearchProfileRepository) FindByUserId(arg0 context.Context, arg1 int) (model.UserSearchProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].(model.UserSearchProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserSearchProfileRepositoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserSearchProfileRepository)(nil).FindByUserId), arg0, arg1)
}

// UpdateUserSearchProfile mocks base method.
func (m *MockUserSearchProfileRepository) UpdateUserSearchProfile(arg0 context.Context, arg1 map[string]interface{}) (model.UserSearchProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSearchProfile", arg0, arg1)
	ret0, _ := ret[0].(model.UserSearchProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSearchProfile indicates an expected call of UpdateUserSearchProfile.
func (mr *MockUserSearchProfileRepositoryMockRecorder) UpdateUserSearchProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSearchProfile", reflect.TypeOf((*MockUserSearchProfileRepository)(nil).UpdateUserSearchProfile), arg0, arg1)
}
