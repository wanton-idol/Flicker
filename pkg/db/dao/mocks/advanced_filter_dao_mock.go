// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/db/dao (interfaces: AdvancedFilterRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SuperMatch/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAdvancedFilterRepository is a mock of AdvancedFilterRepository interface.
type MockAdvancedFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdvancedFilterRepositoryMockRecorder
}

// MockAdvancedFilterRepositoryMockRecorder is the mock recorder for MockAdvancedFilterRepository.
type MockAdvancedFilterRepositoryMockRecorder struct {
	mock *MockAdvancedFilterRepository
}

// NewMockAdvancedFilterRepository creates a new mock instance.
func NewMockAdvancedFilterRepository(ctrl *gomock.Controller) *MockAdvancedFilterRepository {
	mock := &MockAdvancedFilterRepository{ctrl: ctrl}
	mock.recorder = &MockAdvancedFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvancedFilterRepository) EXPECT() *MockAdvancedFilterRepositoryMockRecorder {
	return m.recorder
}

// CreateAdvancedFilter mocks base method.
func (m *MockAdvancedFilterRepository) CreateAdvancedFilter(arg0 context.Context, arg1 model.AdvancedFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvancedFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdvancedFilter indicates an expected call of CreateAdvancedFilter.
func (mr *MockAdvancedFilterRepositoryMockRecorder) CreateAdvancedFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvancedFilter", reflect.TypeOf((*MockAdvancedFilterRepository)(nil).CreateAdvancedFilter), arg0, arg1)
}

// FindByUserID mocks base method.
func (m *MockAdvancedFilterRepository) FindByUserID(arg0 int) (model.AdvancedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0)
	ret0, _ := ret[0].(model.AdvancedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockAdvancedFilterRepositoryMockRecorder) FindByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockAdvancedFilterRepository)(nil).FindByUserID), arg0)
}

// UpdateAdvancedFilter mocks base method.
func (m *MockAdvancedFilterRepository) UpdateAdvancedFilter(arg0 model.AdvancedFilter) (model.AdvancedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdvancedFilter", arg0)
	ret0, _ := ret[0].(model.AdvancedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdvancedFilter indicates an expected call of UpdateAdvancedFilter.
func (mr *MockAdvancedFilterRepositoryMockRecorder) UpdateAdvancedFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvancedFilter", reflect.TypeOf((*MockAdvancedFilterRepository)(nil).UpdateAdvancedFilter), arg0)
}
