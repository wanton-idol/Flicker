// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/service (interfaces: S3ServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockS3ServiceInterface is a mock of S3ServiceInterface interface.
type MockS3ServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockS3ServiceInterfaceMockRecorder
}

// MockS3ServiceInterfaceMockRecorder is the mock recorder for MockS3ServiceInterface.
type MockS3ServiceInterfaceMockRecorder struct {
	mock *MockS3ServiceInterface
}

// NewMockS3ServiceInterface creates a new mock instance.
func NewMockS3ServiceInterface(ctrl *gomock.Controller) *MockS3ServiceInterface {
	mock := &MockS3ServiceInterface{ctrl: ctrl}
	mock.recorder = &MockS3ServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3ServiceInterface) EXPECT() *MockS3ServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockS3ServiceInterface) DeleteFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockS3ServiceInterfaceMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockS3ServiceInterface)(nil).DeleteFile), arg0, arg1)
}

// GetFilesInFolder mocks base method.
func (m *MockS3ServiceInterface) GetFilesInFolder(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesInFolder", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesInFolder indicates an expected call of GetFilesInFolder.
func (mr *MockS3ServiceInterfaceMockRecorder) GetFilesInFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesInFolder", reflect.TypeOf((*MockS3ServiceInterface)(nil).GetFilesInFolder), arg0, arg1)
}

// SignS3FilesUrl mocks base method.
func (m *MockS3ServiceInterface) SignS3FilesUrl(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignS3FilesUrl", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignS3FilesUrl indicates an expected call of SignS3FilesUrl.
func (mr *MockS3ServiceInterfaceMockRecorder) SignS3FilesUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignS3FilesUrl", reflect.TypeOf((*MockS3ServiceInterface)(nil).SignS3FilesUrl), arg0, arg1)
}

// UploadFileToS3 mocks base method.
func (m *MockS3ServiceInterface) UploadFileToS3(arg0, arg1 string, arg2 multipart.File, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileToS3", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileToS3 indicates an expected call of UploadFileToS3.
func (mr *MockS3ServiceInterfaceMockRecorder) UploadFileToS3(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileToS3", reflect.TypeOf((*MockS3ServiceInterface)(nil).UploadFileToS3), arg0, arg1, arg2, arg3)
}
