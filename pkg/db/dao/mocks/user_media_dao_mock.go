// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SuperMatch/pkg/db/dao (interfaces: UserMediaRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SuperMatch/model"
	dao "github.com/SuperMatch/pkg/db/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockUserMediaRepository is a mock of UserMediaRepository interface.
type MockUserMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserMediaRepositoryMockRecorder
}

// MockUserMediaRepositoryMockRecorder is the mock recorder for MockUserMediaRepository.
type MockUserMediaRepositoryMockRecorder struct {
	mock *MockUserMediaRepository
}

// NewMockUserMediaRepository creates a new mock instance.
func NewMockUserMediaRepository(ctrl *gomock.Controller) *MockUserMediaRepository {
	mock := &MockUserMediaRepository{ctrl: ctrl}
	mock.recorder = &MockUserMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMediaRepository) EXPECT() *MockUserMediaRepositoryMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockUserMediaRepository) DeleteById(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockUserMediaRepositoryMockRecorder) DeleteById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockUserMediaRepository)(nil).DeleteById), arg0, arg1, arg2)
}

// FindById mocks base method.
func (m *MockUserMediaRepository) FindById(arg0 context.Context, arg1 int) (model.UserMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(model.UserMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserMediaRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserMediaRepository)(nil).FindById), arg0, arg1)
}

// FindByIdAndUserId mocks base method.
func (m *MockUserMediaRepository) FindByIdAndUserId(arg0 context.Context, arg1, arg2 int) (*model.UserMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdAndUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.UserMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdAndUserId indicates an expected call of FindByIdAndUserId.
func (mr *MockUserMediaRepositoryMockRecorder) FindByIdAndUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdAndUserId", reflect.TypeOf((*MockUserMediaRepository)(nil).FindByIdAndUserId), arg0, arg1, arg2)
}

// FindByUserId mocks base method.
func (m *MockUserMediaRepository) FindByUserId(arg0 context.Context, arg1 int) ([]model.UserMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].([]model.UserMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserMediaRepositoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserMediaRepository)(nil).FindByUserId), arg0, arg1)
}

// FindFirstGroupByUserID mocks base method.
func (m *MockUserMediaRepository) FindFirstGroupByUserID(arg0 context.Context, arg1 []int) ([]dao.UserMatchUserMediaDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstGroupByUserID", arg0, arg1)
	ret0, _ := ret[0].([]dao.UserMatchUserMediaDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstGroupByUserID indicates an expected call of FindFirstGroupByUserID.
func (mr *MockUserMediaRepositoryMockRecorder) FindFirstGroupByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstGroupByUserID", reflect.TypeOf((*MockUserMediaRepository)(nil).FindFirstGroupByUserID), arg0, arg1)
}

// Insert mocks base method.
func (m *MockUserMediaRepository) Insert(arg0 context.Context, arg1 model.UserMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserMediaRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserMediaRepository)(nil).Insert), arg0, arg1)
}
